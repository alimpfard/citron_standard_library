import Library/Data/SwitchCase.
import Library/Data/Generator.

#:language XFrozen

var ast2ctrcode is {:self:ast:curindent:options
  options is options or: {^Map new.}.
  var max_line_length is options at: 'max_line_length', or: 80.
  var indent_s        is ' ' * (options at: 'indent_length', or: 2).
  var pkwmsgs         is options at: 'parenthesize_kwmsgs', or: False.
  var inrawcontext    is options at: 'in_call_context', or: 0.
  var cur_line_length is options at: 'cur_line_length', or: 0.
  var min_message_split is options at: 'min_message_split', or: 5.

  options
    put: min_message_split at: 'min_message_split',
    put: cur_line_length at: 'cur_line_length',
    put: max_line_length at: 'max_line_length',
    put: pkwmsgs at: 'parenthesize_kwmsgs',
    put: inrawcontext at: 'in_call_context'.

  curindent is curindent or: 0.
  ^(frozen __ is
    case: 'LTRNUM' do: {
      ^ast value.
    },
    case: 'LTRSTRING' do: {
      var value is ast value.
      var mvalue is ''.
      var strs is value split: '\n'.
      var indent is indent_s * curindent.
      var last_line_length is 0.
      value length + 2 + cur_line_length < max_line_length ifTrue: {
        mvalue is '\'%s\'' % [value escape: '\\\'', escapeAsciiControls].
        cur_line_length +=: mvalue length.
        ^mvalue.
      }.
      var splitLine is {:str:esc
        esc ifFalse: {
          str is str escape: '\\', escapeAsciiControls.
        }.
        var clinex is max_line_length - 2 - cur_line_length max: 2.
        Generator
          elementsOf: str,
          chunks: clinex fill: '',
          each_v: {:chunk
            var line is
              '\'%s\' +\n%s' % [
                (chunk filter_v: \:x x, join: '', escape: '\''),
                indent + (indent_s * 2)
              ].
            last_line_length is line length.
            mvalue +=: line.
          }.
        mvalue is mvalue from: 0 length: mvalue length - indent_s length.
        mvalue contains: '\n', ifTrue: {
          mvalue is '(' + mvalue.
          &&cur_line_length is 0.
          mvalue is mvalue rightTrim.
          mvalue is mvalue from: 0 length: mvalue length - '+' length.

        }.
      }.
      strs count > 1 ifTrue: {
        mvalue +=: '('.
        var sl is value split: '\n'.
        Generator elementsOf: sl init, each_v: {:&str
          str is str escape: '\\', escapeAsciiControls.
          str +=: '\\n'.
          str length + 3 + cur_line_length < max_line_length ifTrue: {
            var line is '\'%s\' +\n%s' % [(str escape: '\''), indent + indent_s].
            last_line_length is line length.
            mvalue +=: line.
          } ifFalse: { splitLine[str, True]. }.
        }.
        var str is sl last.
        str is str escape: '\\', escapeAsciiControls.
        str length + 3 + cur_line_length < max_line_length ifTrue: {
          var line is '\'%s\' +\n%s' % [(str escape: '\''), indent + indent_s].
          last_line_length is line length.
          mvalue +=: line.
        } ifFalse: { splitLine[str, True]. }.
        mvalue is mvalue rightTrim.
        mvalue is mvalue from: 0 length: mvalue length - '+' length.
      } ifFalse: { splitLine[strs head, False]. }.
      mvalue is mvalue rightTrim.
      mvalue is mvalue from: 0 length: mvalue length.
      mvalue +=: ')'.
      cur_line_length +=: last_line_length.
      ^mvalue rightTrim.
    },
    case: 'LTRNIL' do: {
      ^'Nil'.
    },
    case: 'LTRBOOLTRUE' do: {
      ^'True'.
    },
    case: 'LTRBOOLFALSE' do: {
      ^'False'.
    },
    case: 'REFERENCE' do: {
      var value is ast value.
      ^(frozen __ is
        case: 'My'     do: {\ 'my %s' },
        case: 'Var'    do: {\ 'var %s' },
        case: 'Const'  do: {\ 'const %s' },
        case: 'Frozen' do: {\ 'frozen %s' },
        default: {\ '%s' }) switch: ast modifier, % [value].
    },
    case: 'EXPRMESSAGE' do: {
      var rec is self[ast @ 0, curindent, options].
      var ct is ast count.
      rec = 'me' ifTrue: {
        (ct > 0) ifTrue: {
          (ast @ 1) type = 'KWMESSAGE' ifTrue: {
            rec is ''.
          }.
        }.
      }.
      var always_split_kwc is ast count.
      always_split_kwc > 2 ifTrue: {
        ast each: {:i:ast
          (i = 0) continue.
          ast type = 'KWMESSAGE' ifFalse: { always_split_kwc -=: 1. }.
        }.
      }.
      always_split_kwc is (always_split_kwc > 2) | (ast count > min_message_split).
      ct - 1 times: {:i
        var s is ast @ (i + 1).
        var rv is ' ' + self[s, curindent, options].
        always_split_kwc & (i !=: 0) ifTrue: {
            rec +=: '\n' + (indent_s * curindent).
            cur_line_length -=: cur_line_length.
        } ifFalse: {
          (rec length + cur_line_length > max_line_length) ifTrue: {
            (rec split: '\n', last) length + rv length + cur_line_length > max_line_length ifTrue: {
              rec +=: '\n' + (indent_s * curindent).
              cur_line_length -=: cur_line_length.
            }.
          }.
        }.
        rec +=: rv.
        i !=: ct - 2, & (s type = 'KWMESSAGE') ifTrue: {
          pkwmsgs ifTrue: {
            &&rec is '(${{rec}}$)'.
          } ifFalse: {
	          s value !=: 'applyAll:', ifTrue: {
                    rec +=: ','.
	          }.
          }.
        } ifFalse: {
          pkwmsgs ifTrue: {
            &&rec is '(${{rec}}$)'.
          }.
        }.
      }.
      var lastnewlineidx is rec lastIndexOf: '\n'.
      lastnewlineidx !=: -1, ifTrue: {
        cur_line_length -=: cur_line_length.
        cur_line_length +=: rec length - lastnewlineidx.
      }.
      ^rec.
    },
    case: 'UNAMESSAGE' do: {
      ^ast value.
    },
    case: 'BINMESSAGE' do: {
      ^ast value + ' ' + self[ast @ 0, curindent, options].
    },
    case: 'KWMESSAGE' do: {
      ast value = 'applyAll:' ifTrue: {
        # single expression, return [...args]
        options put: 1 at: 'in_call_context'.
        ^self[ast @ 0, curindent, options].
      }.
      var value is ast value split: ':'.
      var code is Array < ''.
      curindent +=: 1.
      value each: {:i:x
        var tc is '%s: %s ' % [x, self[ast @ i, curindent, options]].
        var tchead is tc split: '\n', head.
        (code last length + tchead length + cur_line_length > max_line_length) ifTrue: { # ...\n <code> <tc>
          code push: ''.
          cur_line_length -=: cur_line_length.
        }.
        code last +=: tc.
      }.
      var indent is indent_s * (curindent + 1).
      code is (code join: '\n' + indent).
      curindent -=: 1.
      var res is code rightTrim.
      var lastnewlineidx is res lastIndexOf: '\n'.
      lastnewlineidx !=: -1, ifTrue: {
        cur_line_length -=: cur_line_length.
        cur_line_length +=: res length - lastnewlineidx.
      }.
      ^res.
    },
    case: 'EXPRASSIGNMENT' do: {
      var ref is self[(ast at: 0), curindent, options].
      var _value is self[(ast at: 1), curindent, options].
      ^_value length > 0 either: { ^'%s is %s' % [ref, _value]. } or: ref.
    },
    case: 'SYMBOL' do: {
      ^$!ast.
    },
    case: 'NESTED' do: {
      var code is '('.
      var ps is ast at: 0.
      curindent +=: 1.
      var tcode is self[ps, curindent, options].
      tcode contains: '\n', ifTrue: {
        cur_line_length -=: cur_line_length.
        tcode is '\n' + (indent_s * curindent) + self[ps, curindent, options].
      }.
      code +=: tcode.
      curindent -=: 1.
      var lastnewlineidx is code lastIndexOf: '\n'.
      lastnewlineidx !=: -1, ifTrue: {
        cur_line_length -=: cur_line_length.
        cur_line_length +=: code length - lastnewlineidx.
      }.
      ^code + ')'.
    },
    case: 'CODEBLOCK' do: {
      var ps is ast at: 0.
      var ins is ast at: 1.
      var indentEnd is True.
      var newline is True.
      var fmt is ast modifier = 'My' either: {
        ^ins instrCount = 1 either: {
          newline is False.
          indentEnd is False.
          var in is ins @ 0.
          (frozen iskwm is {:self:node
            node type = 'KWMESSAGE' ifTrue: {
              ^ True.
            }.
            var yes is False.
            node count times: {:i
              var n is node @ i.
              self[n] ifTrue: {
                yes is True.
                yes break.
              }.
            }.
            ^yes.
          })[in] ifTrue: {
            ^'(\\%:L%s%:L%s)'.
          } ifFalse: {
            var noss is '\\%:L%s%:L%s'.
            var ss is '{\\%:L%s%:L%s}'.
            ^(ps count = 0) | (ins count > 1) either: ss or: noss.
          }.
        } or: '{\\%:L%s%:L\n%s}'.
      } or: '{%:L%s%:L\n%s}'.
      var eindent is indent_s * curindent.
      curindent +=: 1.
      var cindent is indentEnd either: { ^'\n' + (indent_s * curindent). } or: ' '.
      var dot is indentEnd either: '.' or: ''.
      var res is fmt % ['',
              (Array new fill: ps count with: \:x ':' + ((frozen decodeF is {:node ^node value = '' either: { cur_line_length -=: cur_line_length. ^self[node, curindent, options].} or: node value.})[ps @ x])),
              cindent,
              cindent,
              (Array new fill: ins count with: {\:x cur_line_length -=: cur_line_length. self[ins @ x, curindent, options] + dot.}),
              newline either: eindent or: ''
            ].
      curindent -=: 1.
      var lastnewlineidx is res lastIndexOf: '\n'.
      lastnewlineidx !=: -1, ifTrue: {
        cur_line_length -=: cur_line_length.
        cur_line_length +=: res length - lastnewlineidx.
      }.
      ^res.
    },
    case: 'PROGRAM' do: {
      ^(Array new fill: ast count with: {:x
          cur_line_length -=: cur_line_length.
          ^self[ast @ x, curindent, options] + '.'.
        }) join: '\n' + (indent_s * curindent).
    },
    case: 'ENDOFPROGRAM' do: { ^''. },
    case: 'RETURNFROMBLOCK' do: { ^'^' + self[ast @ 0, curindent, options]. },
    case: 'IMMUTABLE' do: {
      var ps is ast at: 0.
      var pcount is ps count.
      var newlined is False.
      var braced is False.
      inrawcontext +=: 1.
      var elems is Array new.
      pcount times: {:i
        var px is self[ps @ i, curindent, options].
        px contains: '\n', ifTrue: {
          cur_line_length -=: cur_line_length.
          elems push: self[ps @ i, curindent, options].
        } ifFalse: {
          elems push: px.
        }.
      }.
      inrawcontext -=: 1.
      elems all: {\:x x startsWith: '.'}, & (elems count > 0) ifTrue: {
        braced is True.
        elems fmap!: {:&x
          ^x skip: 1.
        }.
      } ifFalse: {
        braced is False.
        elems fmap!: {:&x
          x startsWith: '.', ifTrue: {
            ^'$(' + (x skip: 1) + ')'.
          } ifFalse: {
            ^x.
          }.
        }.
      }.
      var sbrac is braced either: '{' or: '['.
      var ebrac is braced either: '}' or: ']'.
      var code is Array < (sbrac + '').
      elems each_v: {:&gen
        var tcode is code last + gen + ', '.
        tcode split: '\n', last length + cur_line_length > max_line_length ifTrue: {
          code unshift: (indent_s * (curindent + 1)) + (code shift skip: 1).
          code unshift: sbrac.
          code push: (indent_s * (curindent + 1)) + gen + ', '.
          newlined is True.
          cur_line_length -=: cur_line_length.
        } ifFalse: { code last +=: gen + ', '. }.
      }.
      pcount > 0 ifTrue: { code put: (code last from: 0 to: code last length - 2) at: code count - 1. }.
      code last split: '\n', last length + cur_line_length > max_line_length
        ifTrue: {
          code push: ''.
          cur_line_length -=: cur_line_length.
        }.
      newlined ifTrue: {
        code push: (indent_s * curindent) + ebrac.
      } ifFalse: {
        code last +=: ebrac.
      }.
      var res is code filter_v: \:x x trim length, join: '\n'.
      var lastnewlineidx is res lastIndexOf: '\n'.
      lastnewlineidx !=: -1, ifTrue: {
        cur_line_length -=: cur_line_length.
        cur_line_length +=: res length - lastnewlineidx.
      }.
      ^res.
    },
    case: 'RAW' do: {
      var res is Nil.
      inrawcontext = 2 ifTrue: {
        res is '.' + self[ast @ 0, curindent, options].
      } ifFalse: {
        res is ((frozen _ is
            case: 'None' do: {\ '%s'},
            case: 'My'   do: {\ '$(%s)'. },
            default:         {
              ^'%s'.
            }
        ) switch: ast modifier) % [self[ast @ 0, curindent, options]].
      }.
      ^res.
    },
    case: 'EMBED' do: {
      ast modifier = 'Var' ifTrue: {
        var res is ast at: 1.
        res isA: AST, ifTrue: {
          ^self[res, curindent, options].
        }.
        ^res toString.
      }.
      var qq is ast at: 0.
      ^'$`(' + self[qq, curindent, options] + ')'.
    },
    case: 'LISTCOMP' do: {
      var expr is ast at: 0.
      var generator is ast at: 1.
      var noptions is options copy put: True at: 'parenthesize_kwmsgs'.
      var gencode is ''.
      {
        var pcount is generator count.
        (Array new fill: pcount with: {:i
          var node is generator @ i.
          node type = 'NESTED' ifTrue: {
            var candidate is node at: 0.
            (candidate type = 'EXPRMESSAGE')
              & (candidate at: 0, type = 'REFERENCE')
              & (candidate at: 0, value = 'me')
              & (candidate at: 1, type = 'KWMESSAGE')
              ifTrue: {
                noptions put: False at: 'parenthesize_kwmsgs'.
                ^'(' + self[candidate, curindent, noptions] + ')'.
              }.
          }.
          ^self[node, curindent, noptions].
        }) each_v: {:gen
          var tgencode is gencode + gen + ', '.
          tgencode split: '\n', last length > max_line_length ifTrue: { tgencode is gencode + '\n' + (indent_s * (curindent + 1)) + gen + ', '. }.
          cur_line_length -=: cur_line_length.
          gencode is tgencode.
        }.
        pcount > 0 ifTrue: { gencode is gencode from: 0 to: gencode length - 2. }.
        gencode split: '\n', last length + cur_line_length > max_line_length ifTrue: {
          gencode +=: '\n'.
          cur_line_length -=: cur_line_length.
        }.
      } catch: {}, run.
      var predcode is ''.
      {
        var predicate is ast at: 2.
        var pcount is predicate count.
        (Array new fill: pcount with: \:i self[predicate @ i, curindent, noptions]) each_v: {:gen
          var tpredcode is predcode + gen + ', '.
          tpredcode split: '\n', last length > max_line_length ifTrue: { tpredcode is predcode + '\n' + (indent_s * (curindent + 1)) + gen + ', '. }.
          predcode is tpredcode.
          cur_line_length -=: cur_line_length.
        }.
        pcount > 0 ifTrue: { predcode is predcode from: 0 to: predcode length - 2. }.
        predcode split: '\n', last length + cur_line_length > max_line_length ifTrue: {
          predcode +=: '\n'.
          cur_line_length -=: cur_line_length.
        }.
      } catch: { }, run.
      var exprv is '['.
      expr type = 'NESTED' ifTrue: {
        exprv +=: self[expr @ 0, curindent, expr].
      } ifFalse: {
        exprv +=: self[expr, curindent, options].
      }.
      gencode = '' ifFalse: {
        var exprvb is exprv + ''.
        exprv +=: ',, ' + gencode.
        exprv split: '\n', last length + cur_line_length > max_line_length ifTrue: {
          exprv is '${{exprvb}}$,,\n${{indent_s * (curindent + 1)}}$$$gencode'.
          cur_line_length -=: cur_line_length.
        }.
      }.
      predcode = '' ifFalse: {
        var exprvb is exprv + ''.
        exprv +=: ',, ' + predcode.
        exprv split: '\n', last length + cur_line_length > max_line_length ifTrue: {
          exprv is '${{exprvb}}$,,\n${{indent_s * (curindent + 1)}}$$$predcode'.
          cur_line_length -=: cur_line_length.
        }.
      }.
      exprv +=: ']'.
      var lastnewlineidx is exprv lastIndexOf: '\n'.
      lastnewlineidx !=: -1, ifTrue: {
        cur_line_length -=: cur_line_length.
        cur_line_length +=: exprv length - lastnewlineidx.
      }.
      ^exprv.
    },
    default: { errPen red writeln: '$$ast is not unparsable at the moment ( because of $$value )', resetColor. }) switch: ast type.
}.
