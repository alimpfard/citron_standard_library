import Library/Data/Generator.

var quoteAllUnbound is {:self:ast
    (ast type = 'REFERENCE') ifTrue: {
      Reflect objectExists: ast value, ifFalse: {
        ast type: 'SYMBOL'.
        ast value: (ast value toSymbol).
      }.
      ^ast.
    }.
    ['UNKNOWN', 'RAW', 'PARAMLIST'] contains: ast type, ifFalse: {
    ast each_v: {:inner
      self applyTo: inner.
    }.
  }.
  ^ast.
}.

var readNumber is {:gen
  var nn is ''.
  gen copy each: {:_:x
    x containsPattern: '\\d', not break.
    nn append: x.
  }.
  ^nn toNumber.
}.

var wrapper is {:obj:name
  ^Object cnew: {
    obj => obj.
    name => name.
    on: 'get' do: { ^my obj message: my name arguments: []. }.
    on: 'set:' do: {:x my obj message: my name + ':' arguments: [x]. ^my obj.}.
  }.
}.

var traverse is {:ast:path
  (var gen is Generator elementsOf: path) each: {:i:p
    p = '.' ifTrue: {
      var ind is const readNumber[gen].
      ast is ast @ ind.
    } ifFalse: {
      p = '$' ifTrue: {
        # v => value, t => type, ...?
        var name is gen next.
        name = 'v' ifTrue: {
          ast is const wrapper[ast, 'value'].
        } ifFalse: {
          name = 't' ifTrue: {
            ast is const wrapper[ast, 'type'].
          } ifFalse: {
            thisBlock error: 'Unknown $-descriptor $$name'.
          }.
        }.
      }.
    }.
  }.
  ^ast.
}.

AST on: 'query:' do: {:p ^const traverse[me, p]. }.
AST on: 'set:to:' do: {:p:v
  const traverse[me, p] set: v.
}.
