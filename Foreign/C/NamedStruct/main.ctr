var NamedStruct is Object new.
NamedStruct on: 'new' do: {
  ^me cnew: {
    struct => Nil.
    pnames => Array new.
  }.
}.
NamedStruct on: 'sameFor:' do: {:struct
  var pnames is my pnames.
  ^me cnew: {
    struct => struct.
    pnames => pnames.
  }.
}.
NamedStruct on: 'initAs:names:' do: {:self:desc:names
  my struct is CTypes structWithFormat: desc.
  var pi is my struct padInfo.
  var oc is pi filter: {:_:i ^(i @ 0) not.}.
  (names count !=: oc count) ifTrue: {thisBlock error: 'Expected %d name(s), but got %d' % [(oc count), (names count)].}.
  var pnames is my pnames.
  names each: {:idx:name
    pnames push: (self transformName: name).
    self on: 'member' + (self transformName: name) + ':' do: {:v my struct put: v at: my struct offsets @ const idx.}.
    self on: 'member' + (self transformName: name) do: {^my struct at: my struct offsets @ const idx.}.
  }.
}.
NamedStruct on: 'initWith:names:' do: {:self:struct:names
  struct => struct.
  var pi is my struct padInfo.
  var oc is pi filter: {:_:i ^(i @ 0) not.}.
  (names count !=: oc count) ifTrue: {thisBlock error: 'Expected %d name(s), but got %d' % [(oc count), (names count)].}.
  var pnames is my pnames.
  names each: {:idx:name
    pnames push: (self transformName: name).
    self on: 'member' + (self transformName: name) + ':' do: {:v my struct put: v at: my struct offsets @ const idx.}.
    self on: 'member' + (self transformName: name) do: {^my struct at: my struct offsets @ const idx.}.
  }.
}.
NamedStruct on: 'newIns' do: {
  ^me sameFor: my struct new.
}.
NamedStruct on: 'initialize:' do: {:values
  var offsets is my struct offsets.
  var &struct is my struct.
  offsets each: {:i:offset
     struct put: values @ i at: offset.
  }.
}.
NamedStruct on: 'struct' do: {^my struct.}.
NamedStruct on: 'pack:' do: {:stuff my struct pack: stuff.}.
NamedStruct on: 'unpack' do: {^my struct unpack.}.
NamedStruct on: 'getSize' do: { ^my struct getSize. }.
NamedStruct on: 'transformName:' do: {:name
  ^name split: '_', fmap: {:s ^s upper1st.}, sum.
}.
NamedStruct on: 'show' do: {:self
  ^'{' + (my pnames fmap: \:x '.%s = %s' % [x, (self message: 'member' + x arguments: [])], join: ', ') + '}'.
}.
import export: NamedStruct as: 'NamedStruct'.
