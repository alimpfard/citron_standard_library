Program warning: 'This module is highly unstable and subject to rewrite'.
var TYPEMAP is Map new
  put: 0  at: 'uint8',
  put: 1  at: 'sint8',
  put: 2  at: 'uint16',
  put: 3  at: 'sint16',
  put: 4  at: 'uint32',
  put: 5  at: 'sint32',
  put: 6  at: 'uint64',
  put: 7  at: 'sint64',
  put: 8  at: 'uchar',
  put: 9  at: 'schar',
  put: 10 at: 'ushort',
  put: 11 at: 'sshort',
  put: 12 at: 'uint',
  put: 13 at: 'sint',
  put: 14 at: 'ulong',
  put: 15 at: 'slong',
  put: 16 at: 'float',
  put: 17 at: 'double',
  put: 18 at: 'longdouble',
  put: 19 at: 'pointer'.
var REVERSETYPEMAP is TYPEMAP flip.

var PackedArray is Object cnew: {
  type => -1.
  count => 0.
  array => Nil.
}.
PackedArray on: 'sameFor:' do: {:array
  ^me cnew: {
    array => array.
    count => array count.
    type  => array _type.
  }.
}.
PackedArray on: 'newIns' do: {
  ^me sameFor: my array new.
}.
PackedArray on: 'initWithCType:count:' do: {:c:len
  ^cnew: {
    array  => c.
    type   => Reflect getProperty: ':cType' ofObject: c.
    count  => len.
  }.
}.
PackedArray on: 'initWithType:count:' do: {:t:len
  t is (const TYPEMAP at: t) or: t.
  my array is CTypes packed: t count: len.
  my type is t.
  my count is len.
}.
PackedArray on: 'array' do: {\ my array }.
PackedArray on: 'at:' do: {:idx ^my array at: idx. }.
PackedArray on: 'put:at:' do: {:v:idx my array put: v at: idx. }.
PackedArray on: 'count' do: { ^my count. }.
PackedArray on: '_type' do: { ^my type. }.
PackedArray on: 'type' do: {
  ^'PackedArray(%s[%d])' % [my array, my count].
}.
PackedArray on: 'rectifyType' do: { ^const REVERSETYPEMAP at: my type.  }.
PackedArray on: 'copy' do: {:self
  ^me cnew: {
    array => self array new.
    count => self count.
    type  => self _type.
  }.
}.
PackedArray on: 'each:' do: {:self:blk
  my count times: {:i
    Pen writeln: i.
    blk applyTo: i and: (self at: i) and: self.
  }.
}.
PackedArray on: 'each_v:' do: {:self:blk
  my count times: {:i
    blk applyTo: (self at: i).
  }.
}.
PackedArray on: 'fmap:' do: {:blk
  var n is me copy.
  me each: {:i:v
    n put: (blk applyTo: v) at: i.
  }.
  ^n.
}.
PackedArray on: 'toString' do: {
  var s is me type + '['.
  me each_v: {:v s append: v. s +=: ', '.}.
  me count > 0 ifTrue: { s is s from: 0 to: s length - 2. }.
  ^s append: ']'.
}.
import export: PackedArray as: 'PackedArray'.
