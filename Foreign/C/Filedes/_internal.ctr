import Library/Foreign/C/C_Types: {
  c_int => 'int'.
  c_sint32 => 'ssize_t'.
  c_long => 'size_t'.
  c_ptr => 'void*'.
  c_sint => 'char'.
  load_library => 'load_library'.
}.
import Library/Foreign/C/Alloc/unsafe: ['malloc', 'free', 'memset'].

var FileDesInternals is Object cnew: {
  var library is load_library['thisexec'].

  cif       => CIF new setABI: 0 return: ssize_t argTypes: [int, void*, size_t].

  read_sym  => library read.
  write_sym => library write.

  var read  is {:fd:buf:size ^my cif call: my read_sym  withArgs: [fd, buf, size].}.
  var write is {:fd:buf:size ^my cif call: my write_sym withArgs: [fd, buf, size].}.

  on: 'readFrom:intoBuffer:withLength:' do: read.
  on: 'writeInto:fromBuffer:withLength:' do: write.

  on: 'writeInto:string:' do: {:fd:str ^writeInto: fd fromBuffer: str withLength: str length. }.
  on: 'readFrom:' do: {:self:fd ^readFrom: fd bufferSize: 1024 totalLength: Nil. }.
  on: 'readFrom:bufferSize:totalLength:' do: {:self:fd:size:tlen
    var str is ''.
    var buf is malloc[size].
    memset[buf, 0, size].
    var len is Nil.
    { ^True. } whileTrue: {
      len is self readFrom: fd intoBuffer: buf withLength: size.
      str +=: (buf readBytesAsString: size).
      ((len <=: 0) | (str length >=: tlen)) break.
      memset[buf, 0, len]. # Todo: Figure out a way not to zero all this every iteration
    }.
    free[buf].
    ^str.
  }.
  on: 'readFrom:untilSeen:' do: {:self:fd:stop
    var str is ''.
    var buf is malloc[1024].
    memset[buf, 0, 1024].
    var len is Nil.
    { ^True. } whileTrue: {
      len is self readFrom: fd intoBuffer: buf withLength: 1024.
      var sv is buf readCString.
      str +=: sv.
      ((len <=: 0) | (sv indexOf: stop, !=: -1)) break.
      memset[buf, 0, len]. # Todo: Figure out a way not to zero all this every iteration
    }.
    free[buf].
    ^str.
  }.
}.
