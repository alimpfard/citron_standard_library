import Library/Foreign/C/NamedStruct.

var WebSock is Object cnew: {
  my libwebsock is Nil.
  my libwebsock_client_state is Nil.
  my libwebsock_message is Nil.
  my libwebsock_context is Nil.
  my libwebsock_init is Nil.
  my libwebsock_bind is Nil.
  my libwebsock_wait is Nil.
  my websock_cifs is Nil.
  my ctx is Nil.
}.
WebSock on: 'new' do: {
  ^me cnew: {
    my libwebsock is Nil.
    my libwebsock_client_state is Nil.
    my libwebsock_message is Nil.
    my libwebsock_context is Nil.
    my libwebsock_init is Nil.
    my libwebsock_bind is Nil.
    my libwebsock_wait is Nil.
    my websock_cifs is Nil.
    my ctx is Nil.
  }.
}.
WebSock on: 'init' do: {
  my libwebsock is my libwebsock or: {
    ^CTypes loadLibrary: '/usr/local/lib/libwebsock.so'.
  }.
  my libwebsock_client_state is NamedStruct new initAs: 'sisi' names: ['sockfd', 'flags'].
  my libwebsock_message is NamedStruct new initAs: 'ui6uip' names: ['opcode', 'payload_len', 'payload'].
  my libwebsock_context is NamedStruct new initAs: 'sisisisippppppp' names: ['running', 'ssl_init', 'flags', 'owns_base', 'base', 'onmessage', 'control_callback', 'onopen', 'onclose', 'onpong', 'user_data'].
  my libwebsock_init is my libwebsock libwebsock_init.
  my libwebsock_bind is my libwebsock libwebsock_bind.
  my libwebsock_wait is my libwebsock libwebsock_wait.
  my libwebsock_send_text is my libwebsock libwebsock_send_text.
  my libwebsock_send_binary is my libwebsock libwebsock_send_binary.
  my libwebsock_send_text_with_length is my libwebsock libwebsock_send_text_with_length.
  my libwebsock_close is my libwebsock libwebsock_close.
  my Cvoid is CTypes void.
  my Cptr is CTypes pointer.
  my Cint is CTypes sint.
  my Cuint is CTypes uint.
  my websock_cif_init is CIF new setABI: 0 return: my Cptr argTypes: [].
  my websock_cif_bind is CIF new setABI: 0 return: my Cvoid argTypes: [my Cptr, my Cptr, my Cptr].
  my websock_cif_wait is CIF new setABI: 0 return: my Cvoid argTypes: [my Cptr].
  my websock_cif_send_text is CIF new setABI: 0 return: my Cint argTypes: [my Cptr, my Cptr].
  my websock_cif_send_text_with_length is CIF new setABI: 0 return: my Cint argTypes: [my Cptr, my Cptr, my Cuint].
  my websock_cif_send_binary is CIF new setABI: 0 return: my Cint argTypes: [my Cptr, my Cptr, my Cuint].
  my websock_cif_close is CIF new setABI: 0 return: my Cvoid argTypes: [my Cptr].
  my websock_cif_callc is CIF new setABI: 0 return: my Cint argTypes: [my Cptr, my Cptr].
  my ctx is my websock_cif_init call: my libwebsock_init withArgs: [].
  my libwebsock_context struct setFrom: my ctx.
  # Pen writeln: my libwebsock_message struct padInfo.
}.
WebSock on: 'bind:port:' do: {:adr:port
  my websock_cif_bind call: my libwebsock_bind withArgs: [my ctx, (CTypes fromString: adr), (CTypes fromString: port toString)].
}.
WebSock on: 'wait' do: {
  my websock_cif_wait call: my libwebsock_wait withArgs: [my ctx].
}.
WebSock on: 'onmessage:' do: {:fn
  var ptr is CTypes closureOf: (me _prepare_fn_onm: fn) withCIF: (CIF new setABI: 0 return: my Cint argTypes: [(my Cptr), (my Cptr)]).
  my libwebsock_context memberOnmessage: ptr.
}.
WebSock on: 'onopen:' do: {:fn
  var ptr is CTypes closureOf: (me _prepare_fn_onoc: fn) withCIF: (CIF new setABI: 0 return: my Cint argTypes: [(my Cptr)]).
  my libwebsock_context memberOnopen: ptr.
}.
WebSock on: 'onclose:' do: {:fn
  var ptr is CTypes closureOf: (me _prepare_fn_onoc: fn) withCIF: (CIF new setABI: 0 return: my Cint argTypes: [(my Cptr)]).
  my libwebsock_context memberOnclose: ptr.
}.
WebSock on: '_prepare_fn_onm:' do: {:self:fn
  var libwebsock_client_state is my libwebsock_client_state.
  var libwebsock_message is my libwebsock_message.
  ^{:state:msg
      state is state derefAs: const libwebsock_client_state struct.
      msg is msg derefAs: const libwebsock_message struct.
      var r is const fn applyTo: const self and: (const libwebsock_client_state sameFor: state) and: (const libwebsock_message sameFor: msg).
      ^r.
    }.
}.
WebSock on: '_prepare_fn_onoc:' do: {:self:fn
  var libwebsock_client_state is my libwebsock_client_state.
  ^{:state
      state is state derefAs: const libwebsock_client_state struct.
      var r is const fn applyTo: const self and: (const libwebsock_client_state sameFor: state).
      ^r.
    }.
}.
WebSock on: 'sendText:state:' do: {:txt:ctx
  txt is CTypes fromString: txt.
  my websock_cif_send_text call: my libwebsock_send_text withArgs: [(ctx struct), txt].
}.
WebSock on: 'sendBinaryFile:state:' do: {:file:ctx
  var size is file size.
  var txt is CTypes fromString: (file seek: 0, read).
  my websock_cif_send_binary call: my libwebsock_send_binary withArgs: [(ctx struct), txt, size].
}.
WebSock on: 'closeState:' do: {:ctx
  my websock_cif_close call: my libwebsock_close withArgs: [(ctx struct)].
}.

Reflect objectExists: 'JSON', ifTrue: {
  WebSock on: 'toJSON' do: { ^'{}'. }.
}.

import export: WebSock as: 'WebSock'.
