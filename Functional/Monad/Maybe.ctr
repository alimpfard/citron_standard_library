import Library/Functional/TypeClass/Monad.
var Maybe is Monad new
  on: 'type' do: {\
    'Maybe'
  },
  on: 'just:' do: {:p
    ^Just cnew: {
      my value is p.
    }.
  },
  on: 'nothing' do: {
    ^Nothing.
  },
  on: 'unpack:' do: {:self:to:context
    ^((me type startsWith: Just type)) & ((to type startsWith: Just type))
      either: {
          self unwrap message: 'unpack:' arguments: [to unwrap, context].
      }
      or: {
        ^(self type) = (Nothing type) either: {
          ([(String type), (Nothing type)] contains: to type) ifFalse: {
            thisBlock error: ('%s cannot be constructed by %s' % [(Reflect strTypeOf: to), (Reflect strTypeOf: const self)]).
          }.
          Reflect set: to to: Nothing.
          ^Nothing.
        } or: {
          thisBlock error: ('%s cannot be constructed by %s' % [(Reflect strTypeOf: to), (Reflect strTypeOf: const self)]).
        }.
      }.
  },
  on: 'equals:' do: {:self:other
    ^(me type) = (var tt is other type)
      either: {
        ^tt = (Nothing type) either: True or: {^(self unwrap) = (other unwrap).}.
        }
      or: False.
  },
  learn: '=' means: 'equals:'.
var Just is Maybe cnew: { value => Nil. },
  on: '$' do: {:v
    ^me cnew: {
      my value is v.
    }.
  },
  on: 'bind:' do: {:fn
    var thisContext is me.
    var value is my value.
    var val is fn applyTo: value.
    (Reflect isObject: val linkedTo: Maybe) ifFalse: {
      ((var vt is val type) = (value type)) | (value type equals: Nil type) ifTrue: {
        val is Just $ val.
      }, else: {
        thisBlock error: ('Invalid return type for Maybe#bind:, Expected %s|%s, got %s' % [(Maybe type), (value type), (val type)]).
      }.
    }.
    ^val.
  },
  on: 'type' do: {
    my value = Nil ifTrue: { ^'Maybe#Just'. }.
    ^'Maybe#Just#%s' % [(my value type)].
  },
  on: 'toString' do: {\
    'Just $ (%s)' % [my value].
  },
  on: 'isJust' do: { ^True. },
  on: 'unwrap' do: {\ my value }.
var Nothing is Maybe new
  on: 'type' do: {
      ^'Maybe#Nothing'.
  },
  on: 'bind:' do: {:fn
    ^Nothing.
  },
  on: 'isJust' do: { ^False. },
  on: 'toString' do: {\ 'Nothing' }.
import
  export: Nothing as: 'Nothing',
  export: Just as: 'Just',
  export: Maybe as: 'Maybe'.
