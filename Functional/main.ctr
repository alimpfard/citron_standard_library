CodeBlock on: 'curryFirst:' do: {:value
 var argcount is (Reflect argumentListOf: me, count).
 argcount = 0 ifTrue: {thisBlock error: 'Cannot curry a zero argument function. Please use partial application instead (apply:).'.}.
 ^(
   argcount = 1
   either:
     ({^
       {^my self applyTo: my value.}
         set: 'self' value: my self,
         set: 'value' value: my value.
      }
       set: 'self' value: me,
       set: 'value' value: value
    )
   or:
     ({
       ^{:*args ^my self message: my message arguments: [my value] + args.}
         set: 'message' value: ('applyTo:' + ('and:' * (my argcount - 1))),
         set: 'self' value: my self,
         set: 'value' value: my value.
      }
      set: 'argcount' value: argcount,
      set: 'self' value: me,
      set: 'value' value: value
     )
 ).
}.

CodeBlock on: 'curryLast:' do: {:value
 var argcount is (Reflect argumentListOf: me, count).
 argcount = 0 ifTrue: {thisBlock error: 'Cannot curry a zero argument function. Please use partial application instead (apply:).'.}.
 ^(
   argcount = 1
   either:
     ({^
       {^my self applyTo: my value.}
         set: 'self' value: my self,
         set: 'value' value: my value.
      }
       set: 'self' value: me,
       set: 'value' value: value
    )
   or:
     ({
       ^{:*args ^my self message: my message arguments: args + [my value].}
         set: 'message' value: ('applyTo:' + ('and:' * (my argcount - 1))),
         set: 'self' value: my self,
         set: 'value' value: my value.
      }
      set: 'argcount' value: argcount,
      set: 'self' value: me,
      set: 'value' value: value
     )
 ).
}.

# CodeBlock on: 'applyMany:' do: {:args
#   var vcount is args count.
#   var argcount is (Reflect argumentListOf: me, count).
#   ^argcount = vcount
#   either:
#     (
#       {^my self message: my message arguments: my value.}
#         set: 'self' value: me,
#         set: 'message' value: (argcount > 1 either: ('applyTo:' + (['and:'] * (argcount - 1) join: '')) or: (argcount = 1 either: 'applyTo:' or: 'run')),
#         set: 'value' value: args
#     )
#   or:
#     (
#       {^my self applyTo: my value.}
#         set: 'self' value: me,
#         set: 'value' value: value
#     ).
# }.

CodeBlock on: 'apply:' do: {:value
 var argcount is (Reflect argumentListOf: me, count).
 ^argcount > 1
 either:
   (
     {^my self curryFirst: my value.}
       set: 'self' value: me,
       set: 'value' value: value
   )
 or:
   (
     {^my self applyTo: my value.}
       set: 'self' value: me,
       set: 'value' value: value
   ).
}.

CodeBlock on: 'compose:' do: {:func
 var argcount_m is (Reflect argumentListOf: me, count).
 var argcount is (Reflect argumentListOf: func, count).
 ^(
   argcount = 0
   either:
     ({^
       {^my self apply: (my func run).}
         set: 'self' value: my self,
         set: 'func' value: func.
      }
       set: 'self' value: me,
       set: 'func' value: func
    )
   or:
     ({
       ^{:*args ^my self apply: (my func message: my message arguments: args).}
         set: 'message' value: ('applyTo:' + ('and:' * (my argcount - 1))),
         set: 'func' value: func,
         set: 'self' value: my self.
      }
      set: 'argcount' value: argcount,
      set: 'func' value: func,
      set: 'self' value: me
     )
 ).
}.
CodeBlock learn: '<' means: 'compose:'.