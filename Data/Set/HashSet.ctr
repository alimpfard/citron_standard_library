var HashSet is Object cnew: { my map is Map new. }.
var HashSetValueMarker is Object
  new on: '=' do: {:e ^(me id) = (e id).},
      on: 'toString' do: { ^'[Object %s]' % [me id]. }.

HashSet on: 'new' do: {
  ^me cnew: { my map is Map new. }.
}.
HashSet on: 'from:' do: {:map
  ^me cnew: {my map is map.}.
}.
HashSet on: 'fromArray:' do: {:array
  ^me new addAll: array. 
}.
HashSet on: '_marker' do: {^const HashSetValueMarker.}.
HashSet on: 'add:' do: {:v
  my map put: const HashSetValueMarker at: v.
}.
HashSet on: 'extend:' do: {:self:set
  set each_v: {:v self add: v. }.
}.
HashSet on: 'addAll:' do: {:self:iterable
  iterable each_v: {:v self add: v.}.
}.
HashSet on: 'toArray' do: {
  var arr is Array new.
  me each_v: {:v arr unshift: v.}.
  ^arr.
}.
HashSet on: 'clear' do: {
  var map is my map.
  me each_v: {:v map deleteAt: v. }.
}.
HashSet on: 'remove:' do: {:v
  my map deleteAt: v.
}.
HashSet on: 'contains:' do: {:v
  ^const HashSetValueMarker = (my map at: v).
}.
HashSet on: 'each_v:' do: {:v
  my map each: {:k v applyTo: k.}.
}.
HashSet on: 'copy' do: {
  var new is me new.
  ^new extend: me.
}.
HashSet on: 'toString' do: {
  var s is '{'.
  var noprint is [me, my map].
  my map each: {:v
    (noprint contains: v) either: { s append: ':selfReference:, '. } or: {
      s append: v, append: ', '.
    }.
  }.
  s length > 1 ifTrue: {s is s from: 0 to: s length - 2.}.
  s append: '}'.
  ^s.
}.
HashSet on: 'iHash' do: {
  var hash is 0.
  var noprint is [me, my map].
  my map each: {:v
    (noprint contains: v) either: { ^v id. } or: { ^v iHash. }.
  }.
  ^hash.
}.
HashSet on: 'serialize' do: {
  ^'HashSet from: (%s)' % [(my map serialize replace: 'put:([Object %s])' % [me _marker id] with: 'put:(HashSet _marker)')].
}.
HashSet on: 'count' do: {
  ^my map count.
}.
HashSet on: 'type' do: {^'HashSet'.}.
# import export: HashSet as: 'HashSet'.
