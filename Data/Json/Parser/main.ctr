import Library/Data/SwitchCase.

#:language XFrozen


var Json is Object cnew: {
  on: 'new' do: {:blk? }.
  learn: 'cnew:' means: 'new'.

  splitArrayPool => Array new.
  fieldInfoCache => Map new.
  propertyInfoCache => Map new.

  on: 'parse:' do: {:self:json
    var buffer is ''.
    var skip is 0.
    0 to: json length step: 1 do: {:i
      skip > 0 ifTrue: {
        skip -=: 1.
        True continue.
      }.
      var c is json at: i.
      c = '"' ifTrue: {
        skip is (self appendUntilStringEndWithEscape: True fromIndex: i inString: json toBuffer: buffer).
        True continue.
      }.
      self isWhitespace: c, continue.
      buffer +=: c.
    }.
    ^parseAnonymousValue: buffer.
  }.

  on: 'isWhitespace:' do: {:c
    ^'\x{20}\x{09}\x{0a}\x{0b}\x{0c}\x{0d}' indexOf: c, > -1.
  }.
  on: 'fromJson:typed:' do: {:self:json:type
    var buffer is ''.
    var skip is 0.
    0 to: json length step: 1 do: {:i
      skip > 0 ifTrue: {
        skip -=: 1.
        True continue.
      }.
      var c is json at: i.
      c = '"' ifTrue: {
        skip is (self appendUntilStringEndWithEscape: True fromIndex: i inString: json toBuffer: buffer).
        True continue.
      }.
      self isWhitespace: c, continue.
      buffer +=: c.
    }.
    ^parseValue: buffer toType: type.
  }.
  on: 'appendUntilStringEndWithEscape:fromIndex:inString:toBuffer:' do: {:self:app:st:json:buffer
    buffer +=: (json at: st).
    var last is st.
    var skip is 0.
    st + 1 to: json length step: 1 do: {:i
      skip > 0 ifTrue: {
        skip -=: 1.
        True continue.
      }.
      last is i.
      var c is json at: i.
      c = '\\' ifTrue: {
        app ifTrue: { buffer +=: c. }.
        buffer +=: json @ (i + 1).
        skip is 1.
      } ifFalse: {
        c = '"' ifTrue: {
          buffer +=: c.
          True break.
        } ifFalse: {
          buffer +=: c.
        }.
      }.
    }.
    ^ last - st.
  }.
  on: 'split:' do: {:self:json
    var splitArrayPool is my splitArrayPool.
    var splitArray is splitArrayPool count > 0
      either: { ^splitArrayPool pop. }
      or: { ^Array new. }.
    splitArray count times: { splitArray pop. }.
    json length = 2 ifTrue: { ^splitArray. }.

    var parseDepth is 0.
    var buffer is ''.
    var skip is 0.
    1 to: json length - 1 step: 1 do: {:iv
      skip > 0 ifTrue: {
        skip -=: 1.
        True continue.
      }.
      (frozen _ is Nil
        case: '"' do: {
            skip is (self appendUntilStringEndWithEscape: True fromIndex: iv inString: json toBuffer: buffer).
            True continue.
        },
        case: '['
        case: '{' do: {
            parseDepth +=: 1.
        },
        case: ']'
        case: '}' do: {
            parseDepth -=: 1.
        },
        case: ','
        case: ':' do: {
            parseDepth = 0 ifTrue: {
                splitArray push: buffer.
                buffer is ''.
                True continue.
            }.
        }
      ) switch: json @ iv.
      buffer +=: json @ iv.
    }.
    splitArray push: buffer.
    ^ splitArray.
  }.
  on: 'parseValue:toType:' do: {:self:json:type
    type = String ifTrue: {
      json length = 2 ifTrue: { ^''. }.
      var buffer is ''.
      var skip is 0.
      1 to: json length - 1 step: 1 do: {:i
        skip > 0 ifTrue: {
          skip -=: 1.
          True continue.
        }.
        (json @ i = '\\') & (i < json length - 2) ifTrue: {
          var j is '"\\nrtbf/' indexOf: json @ (i + 1).
          j > 0 ifTrue: {
            buffer +=: '"\\\n\r\t\b\f/' @ j.
            skip is 1.
            True continue.
          }.
          (json @ (i + 1) = 'u') & (i < json length - 6) ifTrue: {
            {
              var c is '\'\\u' + (json from: i + 2 length: 4) toNumber.
              buffer +=: (c + '\'') eval.
              skip is 5.
              True continue.
            } catch: {}, run.
          }.
        }.
        buffer +=: json @ i.
      }.
      ^ buffer.
    }.
    type = Number ifTrue: {
      ^ json toNumber.
    }.
    json = 'null' ifTrue: {
      ^ Nil.
    }.
    json = 'true' ifTrue: {
      ^ True.
    }.
    json = 'false' ifTrue: {
      ^ False.
    }.
    type isA: Array, ifTrue: {
      (json @ 0 = '[') & (json @ (json length - 1) = ']') ifFalse: {
        ^ Nil.
      }.
      var elems is self split: json.
      var arr is Array new: elems count.
      elems each: {:i:e arr put: (self parseAnonymousValue: e) at: i. }.
      my splitArrayPool push: elems.
      ^ arr.
    }.
    type isA: Map, ifTrue: {
      (json @ 0 = '{') & (json @ (json length - 1) = '}') ifFalse: {
        ^ Nil.
      }.
      var elems is self split: json.
      elems count mod: 2, !=: 0, ifTrue: { ^Nil. }.
      var map is Map new.
      elems each: {:i:e
        e length <=: 2, continue.
        var keyv is elems @ i from: 1 to: (elems at: i, length - 2).
        var val is self parseAnonymousValue: elems @ (i + 1).
        map put: val at: key.
      }.
      ^ map.
    }.
    type = Object ifTrue: {
      ^ self parseAnonymousValue: json.
    }.
    (json @ 0 = '{') & (json @ (json length - 1) = '}') ifTrue: {
      ^ self parseObject: json ofType: type.
    }.
    ^ Nil.
  }.
  on: 'parseAnonymousValue:' do: {:self:json
    json length = 0 ifTrue: { ^Nil. }.
    (json @ 0 = '{') & (json @ (json length - 1) = '}') ifTrue: {
      var elems is self split: json.
      elems count mod: 2, !=: 0, ifTrue: { ^Nil. }.
      var map is Map new.
      0 to: elems count step: 2 do: {:i
        var e is elems @ i.
        var keyv is (elems @ i) from: 1 length: (e length - 2).
        var val is self parseAnonymousValue: elems @ (i + 1).
        map put: val at: keyv.
      }.
      ^ map.
    }.
    (json @ 0 = '[') & (json @ (json length - 1) = ']') ifTrue: {
      var elems is self split: json.
      var arr is Array new: elems count.
      elems each: {:i:e arr put: (self parseAnonymousValue: e) at: i. }.
      my splitArrayPool push: elems.
      ^ arr.
    }.
    (json @ 0 = '"') & (json @ (json length - 1) = '"') ifTrue: {
      var str is json from: 1 to: json length - 1.
      ^ str replace: '\\' with: ''.
    }.
    (json @ 0 = '-') | ('0123456789' indexOf: json @ 0, > -1) ifTrue: {
      ^{
        ^ json toNumber.
      } catch: { ^0. }, run.
    }.
    json = 'true' ifTrue: {
      ^ True.
    }.
    json = 'false' ifTrue: {
      ^ False.
    }.
    ^ Nil.
  }.
  on: 'parseObject:ofType:' do: {:json:type
    ^ type new. # TODO.
  }.
}.
