var List is Array new.
List on: 'type' do: {^'List'.}.
List on: 'toString' do: {
  var count is me count.
  ^('List of: [' + (me count > 0 either: {^('%s, ' * (count - 1)) + '%s'.} or: '') + ']') formatObjects: me.
}.

List on: 'of:' do: {:p
  ^me new pushAll: p.
}.

List on: 'pushAll:' do: {:self:p
  p each_v: {:x self push: x. }.
}.

List on: 'uncons' do: {
  ^ of: [me head, me tail].
}.

List on: 'null' do: {
  ^(me count > 0) not.
}.

List on: 'map:' do: {:function
  ^(me fmap: function).
}.

List on: 'intercalate:' do: {:elem ^me intersperse: elem, concat.}.

List on: 'flatten' do: {
  ^me foldl: {:acc:x ^acc + x.} accumulator: (Array new).
}.

List on: 'transpose' do: {
  var out is [].
  (me filter: {:i:v ^v null not.}, null) ifFalse: {out is [(me map: {:v ^v head.}, flatten)] + (me map: {:v ^me tail.}, transpose).}.
  ^out.
}.

List on: 'subsequences' do: {
  #TODO: Later
}.

List on: 'permutations' do: {
  #TODO: Later
}.

Array on: 'concat' do: {
  (me count  = 0) ifTrue: {thisBlock error: 'Concat on empty list'.}.
  ^foldl: {:acc:x ^acc + x.}.
}.

List on: 'concatMap:' do: {:func
  ^me fmap: func, concat.
}.

List on: '-' do: {:opt
  var orig is me.
  ^(Reflect isObject: opt linkedTo: Array)
    either: {
      ^orig filter: {:i:v ^opt contains: v, not.}.
    }
    or: {
      ^orig filter: {:i:v ^v !=: opt.}.
    }.
}.

# Array is List.
# import export: List as: 'List'.
