import Library/Data/Numeric/Double: 'defaultEpsilon'.

var Ratio is Object cnew: { numerator => 1. denominator => 1. }.
Ratio
  on: 'new' do: {
    var numerator is my numerator.
    var denominator is my denominator.
    ^me cnew: { numerator => numerator. denominator => denominator. }.
  },
  on: 'num:de:' do: {:numerator:denominator
    ^me cnew: { numerator => numerator. denominator => denominator. }, simplify.
  },
  on: 'numerator' do: {^my numerator.},
  on: 'denominator' do: {^my denominator.},
  on: 'toString' do: {
    ^'%d %% %d' % [my numerator, my denominator].
  },
  on: 'simplify' do: {
    var gcd is {:a:b
      ^b = 0 either: a or: { ^gcd applyTo: b and: (a mod: b). }.
    }.
    var _gcd is gcd applyTo: my numerator and: my denominator.
    my numerator /=: _gcd.
    my denominator /=: _gcd.
  },
  on: 'toNumber' do: { ^my numerator / my denominator. },
  on: 'approxNumber:epsilon:' do: {:rat:eps
    var n is 1.
    var d is 1.
    var frac is n / d.
    { ^(frac - rat) abs > eps. } whileTrue: {
      (frac < rat) either: { n +=: 1. } or: { d +=: 1. n is (rat * d) round. }.
      frac is n / d.
    }.
    ^const Ratio num: n de: d.
  },
  on: 'negate' do: {
    ^const Ratio num: my numerator negate de: my denominator.
  },
  on: '+' do: {:self:other
    ^(other type) = (me type)
      either: {
          ^const Ratio cnew: {
              numerator => ((self numerator * other denominator) + (self denominator * other numerator)).
              denominator => self denominator * other denominator.
           }, simplify.
      }
      or: {
        ^self approxNumber: other epsilon: 0.00001, + self.
      }.
  },
  on: '-' do: {:other
    ^me + other negate.
  },
  on: '*' do: {:self:other
    var rat is const Ratio.
    ^(other type) = (me type)
      either: {
        ^rat num: self numerator * other numerator de: self denominator * other denominator.
      }
      or: {
        ^rat num: other * self numerator de: self denominator.
      }.
  },
  on: '/' do: {:self:other
    var rat is const Ratio.
    ^(other type) = (me type)
      either: {
        ^rat num: self numerator * other denominator de: self denominator * other numerator.
      }
      or: {
        ^rat num: self numerator de: other * self denominator.
      }.
  }.
Number on: 'negate' do: {^0 - me.}.
Number on: '%' do: {:den
  ^const Ratio num: me de: den.
}.
Number on: 'toRatio' do: { ^const Ratio approxNumber: me epsilon: const defaultEpsilon. }.
