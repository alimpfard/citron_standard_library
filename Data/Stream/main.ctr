var Stream is Object cnew: {
  on: 'of:' do: {:what
    ^cnew: {
      source => what.
      position => 0.
      end => what length.
    }.
  }.
  on: 'atEnd' do: {
    ^my position = my end.
  }.
  on: 'tell' do: { ^my position. }.
  on: 'peek' do: {
    ^my source byteAt: my position.
  }.
  on: 'next' do: {
    ^my source byteAt: (my position +=: 1, - 1).
  }.
  on: 'takeUntilMatches:' do: {:vstr
    var startPos is my position.
    var str is my source from: my position to: my end.
    var idx is str indexOf: vstr.
    idx = -1 ifTrue: {
      position => my end.
      ^str.
    } ifFalse: {
      position => my position + idx + vstr length.
      ^str from: 0 to: idx.
    }.
  }.
  on: 'takeWhile:' do: {:self:blk
    var str is ''.
    { ^blk[self peek]. } whileFalse: {
      str +=: self next.
      self atEnd break.
    }.
    ^str.
  }.
  on: 'upToEnd' do: {
    var str is my source from: my position to: my end.
    position => my end.
    ^str.
  }.
  on: 'upTo:' do: {:self:char
    var str is ''.
    { ^self peek = char. } whileFalse: {
      str +=: self next.
      self atEnd break.
    }.
    ^str.
  }.
}.
