Array on: 'repeat:' do: { :i
  var r is Array new.
  var self is me.
  0 to: i step: 1 do: { :j
    (i = j) break.
    r is r + self.
  }.
  ^r.
}.

Array on: 'with:count:' do: { :iter :c
  var arr is Array new.
  var n is 0.
  { ^n < c . } whileTrue: {
    arr push: (iter applyTo: n).
    n +=: 1.
  }.
  ^arr.
}.

Array on: 'shuffle' do: {
  var len is me count - 1.
  var self is me.
  len - 1 to: 1 step: -1 do: { :i
          var j is Dice rollWithSides: (i + 1).
          var swap is (self @ j).
          self put: (self @ i) at: j.
          self put: swap at: i.
  }.
}.

Array on: 'isSubsetOf:' do: { :things
  var return is True.
  ((things count) < (me count)) ifTrue: {return is False.}.
  return ifTrue: {
    var i is 0. var j is 0.
    var arr1 is Array new.
    me each: {:i :v arr1 unshift: v.}.
    var arr2 is Array new.
    things each: {:i :v arr2 unshift: v.}.
    arr1 sort.
    arr2 sort.
    {^return & (i < (arr1 count)) & (j < (arr2 count)).} whileTrue: {
      ((arr2 @ j) < (arr1 @ i)) do ifTrue: { j +=: 1. }, ifFalse: {
        ((arr2 @ j) = (arr1 @ i)) do ifTrue: {i +=: 1. j +=: 1.}, ifFalse: {return is False.} done.
      }.
    }.
  }.
  ^return.
}.

Array on: 'from:to:skip:' do: {:f :t :s
  var newArr is Array new.
  f is (f isNil) either: 0 or: f.
  t is (t isNil) either: (me count) or: t.
  f to: (t - 1) step: s do: { :i
    newArr unshift: (me @ i).
  }.
  ^newArr.
}.
Array on: 'take:' do: {:count
  var arr is Array new.
  var self is me.
  count times: {:i
    arr push: (self @ i).
  }.
  ^arr.
}.

Array on: 'toBoolean' do: {
  ^((me count) !=: 0).
}.

Array on: 'groupBy:' do: {:fn
  var rt is Map new.
  me each_v: {:v
    var r is fn applyTo: v.
    (rt contains: r)
      ifTrue: { rt at: r, push: v. },
      else:   { rt put: (Array < v) at: r. }.
  }.
  ^rt.
}.

Array on: 'nubBy:' do: {:self:fn
  ^me count = 0
    either: me copy
    or: {
      var rt is Array new.
      self each_v: {:v
        (rt any: \:x fn applyTo: x and: v) ifFalse: { rt push: v. }.
      }.
      ^rt.
    }.
}.

Array on: 'nub' do: {
  ^me nubBy: \:x:y x = y.
}.

Array on: 'delete:by:' do: {:self:x:eq
  ^self count = 0
    either: self copy
    or: {
      ^(eq applyTo: x and: var y is self head)
        either: {^self tail.}
        or: {^[y] + (self tail delete: x by: eq).}.
    }.
}.

Array on: 'delete:' do: {:x
  ^me delete: x by: \:x x = x.
}.

Array on: 'difference:' do: {:self:ys
  ^ys foldl: (\:x:y x delete: y) accumulator: me.
}.

Array on: 'union:by:' do: {:ys:eq
  var xs is me.
  ^xs + (xs foldl: (\:x:y x delete: y by: eq) accumulator: (ys nubBy: eq)).
}.

Array on: 'union:' do: {:ys
  ^me union: ys by: \:x:y x = y.
}.

Array on: 'intersect:by:' do: {:ys:eq
  var xs is me.
  ^(xs count min: ys count) = 0
    either: Array new
    or: {
      ^(xs fmap: \:x (ys any: \:y eq applyTo: x and: y) either: [x] or: []) sum.
    }.
}.

Array on: 'scanl:init:' do: {:self:f:q
  ^self count > 0 either: {
    var x is self head.
    var xs is self tail.
    ^[q] + (xs scanl: f init: (f applyTo: q and: x)).
  } or: [q].
}.

Array on: 'inits' do: {:self
  ^(imap: \:i self from: 0 length: i) push: self copy.
}.

Array on: 'tails' do: {:self
  var length is self count.
  ^(imap: \:i self from: i + 1 lengthMax: length) unshift: self copy.
}.
