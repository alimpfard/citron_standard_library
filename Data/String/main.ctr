String on: 'head' do: {:self
  ^self either: { ^self at: 0. } or: Nil.
}.
String on: 'tail' do: {
  ^me skip: 1.
}.
String on: 'init' do: {:self
  ^self from: 0 length: self length - 1.
}.
String on: 'last' do: {
  ^me at: me length - 1.
}.
String on: 'break:' do: {:blk
  var s0 is -1.
  me each: \:i:x blk[x] ifFalse: { s0 is i. }, break.
  ^[(me from: 0 length: s0 + 1), (me skip: s0 + 1)].
}.
String on: 'each:' do: {:b
  me characters each: b.
}.
String on: 'take:' do: {:len
  ^me from: 0 length: len.
}.

String on: 'takeWhile:' do: {:p
  var s is ''.
  me each: {:_:x p[x] either: {s +=: x.} or: { True break. }.}.
  ^s.
}.
String on: 'dropWhile:' do: {:p
  var s is 0.
  me each: {:_:x p[x] either: {s +=: 1.} or: { True break. }.}.
  ^me skip: s.
}.
String on: 'span:' do: {:blk
  var s0 is -1.
  me each: \:i:x blk[x] ifTrue: { s0 is i. }, not break.
  ^[(me from: 0 length: s0 + 1), (me skip: s0 + 1)].
}.
String on: 'insert:at:' do: {:str:idx
    ^(me from: 0 to: idx) + str + (me from: idx to: me length).
}.
String on: 'removeFrom:to:' do: {:st:en
    ^(me from: 0 to: st) + (me from: en to: me length).
}.
String on: 'removeFrom:length:' do: {:st:ln
    ^(me from: 0 to: st) + (me from: (st + ln) to: me length).
}.
String on: 'matchesPattern:' do: {:r
  var res is False.
  (me containsPattern: r) ifTrue: {
    var s is me findPattern: r do: { ^''. } options: ''.
    res is ((s trim) = '').
  }.
  ^res.
}.

String on: 'bisectToLength:' do: {:len
  var arr is Array new.
  me each: len cons: {:i:s arr push: s.}.
  ^arr.
}.

String on: 'skipUntil:' do: {:str
  var index is me indexOf: str.
  ^me from: (index + (str length)) to: (me length).
}.

String on: 'splitAt:' do: {:idx
  ^[
    (from: 0   to: idx),
    (from: idx to: me length)
  ].
}.

var toUnicode is \:i ('\'\\u{%s}\'' % [i]) eval.
var asciiPrintables is (Array new fill: 0x7e - 0x20 with: \:i toUnicode[i + 0x20], join: '').
var digits is '0123456789'.
var hexdigits is '0123456789abcdefABCDEF'.
var octdigits is '01234567'.
var asciiLower is 'abcdefghijklmnopqrstuvwxyz'.
var asciiUpper is asciiLower upper.
