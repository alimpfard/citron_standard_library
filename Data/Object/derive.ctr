var groups is Map fromArray: [
  ['toString', ({:capture__name__ ^{:self
    ^const capture__name__ + ' cnew: { ' + (Reflect getPropertiesOf: self, fmap: {:prop
      var value is Reflect getProperty: prop ofObject: self.
      ^'$$prop => $$value' + '.'.
    }, join: ' ') + ' }'.
  }.})],
  ['=', ({^{:self:other
    ^Reflect getPropertiesOf: self, fmap: ({:prop ^(Reflect getProperty: prop ofObject: self) = (Reflect getProperty: prop ofObject: other).} catch: {:e ^False.}), all: {:x ^x.}.
  }.})],
  ['new:', ({^{:self:argmap :val:instance
    val is Map fromArray: argmap.
    instance is self new.

    Reflect getPropertiesOf: self, each_v: {:prop
      Reflect setProperty: prop ofObject: instance toValue: (val at: prop, or: {^Reflect getProperty: prop ofObject: self.}).
    }.
    ^instance.
  }.})]
].
var derive is {:obj:catdesc
  var catname is catdesc head.
  catdesc is catdesc tail.
  var catfunc is const groups at: catname.
  obj on: catname do: (catfunc applyAll: catdesc).
}.
Object on: 'derive:' do: {:cats
  var this is me.
  cats each_v: \:v derive[this, v].
  ^me.
}.
