#Reflect addGlobalVariable: 'StringIO'.
var _sSplice is \:str:idx:ins (str from: 0 length: idx) + ins + (str skip: idx + ins length).
var StringIO is Object new.
StringIO on: 'new' do: {
  ^me cnew: {
    me init.
  }.
}, on: 'init' do: {
  my internalBuffer is ''.
  my position is 0.
}.

StringIO on: 'write:' do: { :s
  s is s toString.
  my internalBuffer is const _sSplice applyTo: my internalBuffer and: my position and: s.
  my position +=: s length.
}.

StringIO on: 'brk' do: {
  my internalBuffer is const _sSplice applyTo: my internalBuffer and: my position and: '\n'.
  my position +=: 1.
}.

StringIO on: 'read' do: {
  ^ my internalBuffer.
}.


StringIO on: 'close' do: {
  my internalBuffer is Nil.
  my position is Nil.
  ^Nil.
}.

StringIO on: 'flush' do: {
  my internalBuffer is ''.
  my position is 0.
}.

StringIO on: 'seek:' do: {:p
  var len is my internalBuffer length.
  my position is len min: (p >=: 0, either: p or: len + p).
}.

StringIO on: 'rewind' do: { my position is 0. }.

StringIO on: 'readBytes:' do: {:bytes
  ^my internalBuffer from: my position lengthMax: bytes.
}.

import export: StringIO as: 'StringIO'.
