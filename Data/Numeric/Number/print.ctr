Number on: 'asWords' do: {:self
  self = 0 ifTrue: { ^ 'zero'. }.
  var mils is ['',
    ' thousand', ' million', ' billion', ' trillion', ' quadrillion',
    ' quintillion', ' sextillion', ' septillion', ' octillion', ' nontillion',
    ' decillion', ' undecillion', ' duodecillion', ' tredecillion',
    ' quattuordecillion', ' quindecillion', ' sexdecillion', ' septendecillion',
    ' octodecillion', ' novemdecillion', ' vigintillion'
    ].
  var num is self floor.
  var point-something is self - num.
  point-something = 0 either: {
    point-something is ''.
  } or: {
    point-something is ' point ' + (point-something toString skip: 2, characters fmap: \:x x toNumber threeDigitName, join: ' ').
  }.

  var minus is ''.
  self <= 0 ifTrue: {
    minus +=: 'negative '.
    num negate.
  }.
  var answer is ''.
  var milCount is 0.
  {^num > 0.} whileTrue: {
    var three is (num /// 1000) threeDigitName.
    num is num // 1000.
    three = '' ifFalse: {
      answer = '' ifFalse: {
        answer is ', ' + answer.
      }.
      answer is three + (mils at: milCount) + answer.
    }.
    milCount +=: 1.
  }.
  ^minus + answer + point-something.
}.

Number on: 'threeDigitName' do: {:self
  var self is self floor. # we don't deal with floating points
  self = 0 ifTrue: { ^''. }.
  var answer is ''.
  var units is [
    'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',
    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'seventeen', 'eighteen',
    'nineteen'
  ].
  self > 99 ifTrue: {
    answer is units at: self // 100 - 1, + ' hundred'.
    self /// 100 = 0 ifFalse: {
      answer is answer + ' and ' + (self /// 100) threeDigitName.
    }.
    ^answer.
  }.
  self < 20 ifTrue: { ^units at: self - 1. }.
  answer is [
    'twenty', 'thrity','fourty', 'fifty', 'sixty', 'seventy', 'eighty',
    'ninety'
  ] at: self // 10 - 2.
  self /// 10 = 0 ifFalse: {
    answer is answer + '-' + (units at: self /// 10 - 1).
  }.
  ^answer.
}.

Number on: 'decimalDigitLength' do: {:self
  ^(self log / 10 log) ceil or: 1.
}.

Number on: 'numberOfDigitsInBase:' do: {:self:base
  ^(self log / base log) ceil or: 1.
}.

Number on: 'asStringInBase:length:zeroPadded:' do: {:self:base:minimumLength:padWithZeros
  ^toStringInBase: base, paddingLeft: minimumLength, replace: ' ' with: (padWithZeros either: '0' or: ' ').
}.
