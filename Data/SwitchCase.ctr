var CaseConstruct is Object new.
CaseConstruct on: 'initFor:' do: {:obj
  my obj is obj.
  my casemap is Map new.
  my default is Nil.
}.
CaseConstruct on: 'case:do:' do: {:s:b
  my casemap put: b at: s.
}.
CaseConstruct on: 'default:' do: {:b my default is b.}.
CaseConstruct on: 'switch:' do: {:value
  var ans is my casemap at: value.
  var default is my default or: {\ {^Nil.}. }.
  ^ans isNil either: {^default run.} or: {^ans run.}.
}.
CaseConstruct on: 'switch:arguments:' do: {:value:args
  var ans is my casemap at: value.
  var default is my default or: {\ {^Nil.}. }.
  ^ans isNil either: {^default applyAll: args.} or: {^ans applyAll: args.}.
}.
CaseConstruct on: 'switch' do: {
  var ans is my casemap at: my obj.
  var default is my default or: \:_ {^Nil.}.
  ^ans isNil either: default or: ans.
}.
['respondTo:and:and:and:', 'respondTo:and:and:and:and:', 'respondTo:and:and:and:and:and:', 'respondTo:'] each_v: {:msgv
  CaseConstruct on: msgv do: {:self:msg:*args
    msg is msg split: ':'.
    msg last = 'do' ifFalse: {
      thisBlock error: 'CaseConstruct expectes (case:)+do:'.
    }.
    msg is args pop.
    args each: {:_:v
      self case: v do: msg.
    }.
  }.
}.
Object on: 'case:do:' do: { :s :b
  var ret is const CaseConstruct new initFor: me.
  ^ret case: s do: b.
}.

#
# lambdaCase {
#   expr => { consequence },
#   expr => { consequence },
#   ...
# } -> Block {:arg alternative. } -> AST.

var blockCase is {:*exprs
  var frame is Reflect frame: Reflect frameId - 1. # a copy of the past frame
  var otherwise is Object new.
  Reflect
    run: {:&x otherwise => x. _ => x. else => x. }
    inContextAsWorld: frame
    arguments: [otherwise].

  var alternatives is Map new.
  var default is $(Nil).
  exprs each_v: {:expr
    # ASSIGN (case) (alternative)
    var case is expr @ 0 evaluateInContext: frame.
    var alternative is expr @ 1 @ 1.
    case id = otherwise id ifTrue: {
      default is alternative.
    } ifFalse: {
      alternatives put: alternative at: case.
    }.
  }.
  ^$!$({:arg (var res is $`(alternatives) at: arg) isNil ifTrue: { ^$`default.} ifFalse: {^res.}.}).
}.
