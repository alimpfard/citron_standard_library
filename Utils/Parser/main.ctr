var parser is Object new.
parser on: 'of:' do: {:rule
  my func is rule.
}.
#parse sequence, return lhs
parser on: '<' do: {:self:other
  ^const parser new of: {:arg var rhs is self parse: arg. var lhs is other parse: rhs @ 0. ^lhs.}.
}.
#parse sequence, return rhs
parser on: '>' do: {:self:other
  ^const parser new of: {:arg var rhs is self parse: arg. var lhs is other parse: rhs @ 0. ^rhs.}.
}.

#parse union
parser on: '|' do: {:self:other
  ^const parser new of: {:arg
    var rhs is Nil.
    var lhs is Nil.
    {rhs is const me parse: arg.} catch: {:e
      e = 'noparse' ifTrue: {
        rhs is Nil.
        lhs is other parse: arg.
      }, else: {thisBlock error: e.}.}, run.
      ^rhs or: lhs.
    }.
}.

parser on: 'parse:' do: {:inp
  var parser is my func.
  var result is parser applyTo: inp.
  var skip is 0.
  Reflect isObject: result linkedTo: Array, ifTrue: {
    skip is result @ 0.
    result is result @ 1.
  }, else: {
    skip is result length.
  }.
  result = '' ifTrue: {
    thisBlock error: 'noparse'.
  }.
  ^[(inp skip: skip), result].
}.

import export: parser as: 'Parser'.
