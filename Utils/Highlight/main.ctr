import Library/Utils/Colors.
import Library/Data/SwitchCase: 'blockCase'.

#:language XFrozen

var Highlight is Object new.
Highlight on: 'highlight:' do: {:code:html
  # preprocess the code to get rid of pesky comments
  code is code ~ ?>s/('((\\[^\n]|[^''\n])*)')|(\#(.*?)\r?\n)/$1$4/g<?.
  # Pen writeln: code.
  ^Generator repeat: Nil, fmap: {:x ^AST token. },
  foldl: {:e_values:token
    e_values at: 'done', break.

    var &last_toc         is e_values @ 'last_toc'.
    var &returned         is e_values @ 'returned'.
    var &last_end         is e_values @ 'last_end'.
    var &space            is e_values @ 'space'.
    var &messageAcceptors is e_values @ 'messageAcceptors'.
    var &done             is e_values @ 'done'.

    var &this_thing is ''.
    var &rlen is Colors stripColors: returned, length.
    var &color is ''.
    var &last_toc_override is Nil.
    var &after_color is ''.
    var &noquote is False.

    $!((frozen _ is blockCase {
      'RET' => {
        color is (Colors bold) + (Colors magenta).
        after_color is (Colors bold_off).
        this_thing is '^'.
        token put: 1 at: 3.
      },
      'ASSIGNMENT' => {
        # rlen +=: 1.
        color is (Colors bold) + (Colors cyan).
        after_color is (Colors bold_off).
        token put: 2 at: 3.
        this_thing is 'is'.
      },
      'PASSIGNMENT' => {
        # rlen +=: 1.
        color is (Colors bold) + (Colors cyan).
        after_color is Colors bold_off.
        token put: 2 at: 3.
        this_thing is '=>'.
      },
      'BLOCKCLOSE' => {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is '}'.
        token put: this_thing length at: 3.
      },
      'BLOCKOPEN' => {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is '{'.
        token put: this_thing length at: 3.
      },
      'BLOCKOPEN_MAP' => {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is ?>{\<?.
        token put: this_thing length at: 3.
        last_toc_override is 'BLOCKOPEN'.
      },
      'BOOLEANNO' => {
        color is Colors magenta.
        this_thing is 'False'.
        token put: this_thing length at: 3.
      },
      'BOOLEANYES' => {
        color is Colors magenta.
        this_thing is 'True'.
        token put: this_thing length at: 3.
      },
      'CHAIN' => {
        color is (Colors white).
        this_thing is ','.
        token put: this_thing length at: 3.
      },
      'COLON' => {
        this_thing is ':'.
        (last_toc = 'BLOCKOPEN') | (last_toc = 'PARAMN') ifTrue: {
          color is (Colors bold) + (Colors bright) + (Colors magenta).
          after_color is (Colors bold_off) + (Colors bright_off).
          last_toc_override is 'PARAMC'.
        }, else: {
          color is Colors magenta.
        }.
        token put: this_thing length at: 3.
        # token put: (token @ 2 - 1) at: 2.
      },
      'DOT' => {
        this_thing is '.'.
        token put: this_thing length at: 3.
      },
      'FIN' => {
        done is True.
      },
      'NIL' => {
        color is Colors magenta.
        this_thing is 'Nil'.
        token put: this_thing length at: 3.
      },
      'NUMBER' => {
        color is Colors green.
        this_thing is token @ 1.
      },
      'PARCLOSE' => {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is ')'.
        token put: this_thing length at: 3.
      },
      'PAROPEN' => {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is '('.
        token put: this_thing length at: 3.
      },
      'QUOTE' => {
        this_thing is ''.
        noquote not ifTrue: {
          var string is AST getlexbuf.
          var in_escape is False.
          var begin is '\''.
          # var maybe_in_quot is False.
          var delet_this is 0.
          # var slen is string length.
          string characters each: {:i:c
            var justInEscape is False.
            # maybe_in_quot ifTrue: {
            #   maybe_in_quot is False.
            #   (c = '?') & (slen - 1 = i) ifTrue: {
            #     this_thing append: c.
            #     begin is '?>'.
            #     rlen -=: 1.
            #     True break.
            #   }.
            # }.
            (c = '\'') & (in_escape not) ifTrue: { this_thing append: c. True break. }.
            # (c = '<') & (slen - 2 = i) ifTrue: {
            #   this_thing append: c.
            #   maybe_in_quot is True.
            #   True continue.
            # }.
            (c = '\\') ifTrue: {
              in_escape ifTrue: {
                in_escape is False.
                justInEscape is True.
              } ifFalse: {
                justInEscape is True.
                in_escape is True.
              }.
            }.
              justInEscape not & in_escape ifTrue: {
                this_thing append: (Colors cyan + c + Colors yellow).
                delet_this +=: Colors cyan length * 2.
                in_escape is False.
                True continue.
              }.
              justInEscape ifTrue: {
                this_thing append: (Colors cyan + c + Colors yellow).
                delet_this +=: Colors cyan length * 2.
                justInEscape is False.
                True continue.
              }.
              this_thing append: c.
          }.
          AST lexSkip: this_thing bytes - delet_this.
          # Pen writeln: '-%d:%d, %s => l%d b%d' % [token @ 2, AST lexpos, this_thing, this_thing length, this_thing bytes].
          var lendiff is this_thing bytes - this_thing length.
          token put: AST lexpos - lendiff at: 2.
          token put: (Colors stripColors: this_thing, length + 1) at: 3.
          # Pen writeln: '+%d:%d, %s => l%d b%d' % [token @ 2, AST lexpos, this_thing, this_thing length, this_thing bytes].
          color is Colors yellow.
          this_thing is begin + this_thing.
        } ifFalse: {
          this_thing is '\''.
          color is Colors magenta.
        }.
      },
      'REF' => {
        var str is token @ 1.
        var end is token @ 2.
        var len is token @ 3.
        token put: str length at: 3.
        var lendiff is len - (token @ 3).
        token put: end - lendiff at: 2.
        lendiff > 0 ifTrue: {
          # Pen writeln: 'Extra $$lendiff characters'.
          rlen +=: lendiff.
        }.
        (last_toc = 'PARAMC') ifTrue: {
          color is (Colors bold) + (Colors bright) + (Colors magenta).
          after_color is (Colors bold_off) + (Colors bright_off).
          this_thing is token @ 1.
          last_toc_override is 'PARAMN'.
        } ifFalse: {
          var &next is AST token.
          (next @ 0 !=: 'FIN') ifTrue: {AST lexPutBack.}.
          var tok is token @ 1.
          (next @ 0 = 'COLON') ifTrue: {
            (tok = '\\') ifTrue: {
              color is (Colors bold) + (Colors bright) + (Colors green).
              after_color is (Colors bold_off) + (Colors bright_off).
              last_toc_override is 'BLOCKOPEN'.
              this_thing is '\\'.
            } ifFalse: {
              color is (Colors bold) + (Colors bright) + (Colors magenta).
              after_color is (Colors bold_off) + (Colors bright_off).
              AST lexSkip: 1.
              token put: (token @ 2 + 1) at: 2.
              last_toc_override is 'MESSAGE'.
              this_thing is tok + ':'.
            }.
          } ifFalse: {
            (messageAcceptors contains: last_toc) ifTrue: {
              (tok length = 1) ifTrue: {last_toc_override is 'MESSAGE'.}.
              (tok indexOf: ':', !=: -1) ifTrue: {
                # token put: (token @ 2) at: 2.
                token put: (tok + ':') at: 1.
              }.
              color is (Colors bold) + (Colors bright).
              tok @ 0 = '\\' ifTrue: {
                color +=: Colors green.
              } ifFalse: {
                color +=: Colors magenta.
              }.
              after_color is (Colors bold_off) + (Colors bright_off).
              this_thing is tok.
            } ifFalse: {
              # Pen writeln: [token, last_toc, next].
              (tok @ 0) = ((tok @ 0) upper) ifTrue: {
                color is Colors magenta.
                this_thing is tok.
              } ifFalse: {
                this_thing is tok.
                (Array < 'me' ; 'my' ; 'const' ; 'var' ; 'frozen') contains: tok, ifTrue: {
                  # Pen writeln: token.
                  last_toc_override is 'QUAL'.
                  color is (Colors bold) + (Colors bright) + (Colors blue).
                  after_color is (Colors bright_off) + (Colors bold_off).
                }.
              }.
            }.
          }.
        }.
        this_thing @ 0 = '`' ifTrue: {
          this_thing @ (this_thing length - 1) = '`' ifTrue: {
            color is (Colors bright) + (Colors italic) + (Colors yellow).
            after_color +=: Colors italic_off.
          }.
        }.
        token put: this_thing length at: 3.
      },
      'TUPOPEN' => {
        this_thing is '['.
        token put: this_thing length at: 3.
      },
      'TUPCLOSE' => {
        this_thing is ']'.
        token put: this_thing length at: 3.
      },
      'SYMBOL' => {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        var t is AST token.
        (t @ 1) !=: '',
          ifTrue: { token put: (t @ 2) at: 2. },
          else:   { token put: (t @ 2) at: 2. }.
        this_thing is '\\' + (t @ 1).
        token put: this_thing length at: 3.
      },
      'LITERAL_ESC' => {
        this_thing is '$'.
        token last case: -1 do: {}, case: -2 do: {},
                 case: -3 do: { this_thing +=: '!'. }, case: -4 do: { this_thing +=: '\''. noquote is True.},
                 switch.
        color is Colors cyan.
        token put: this_thing length at: 3.
      },
      otherwise => {
        # Pen writeln: token.
        this_thing is token @ 1.
      }
    }) applyTo: token @ 0).

    returned +=: (space * ((token @ 2) - last_end - (token @ 3))).
    returned +=: color + this_thing + Colors default + after_color.

    (token @ 0 = 'CHAIN') & (last_toc = 'REF') ifTrue: { last_toc_override is 'NOT-CHAIN'. }.
    last_toc_override isNil ifTrue: {
      last_toc is token @ 0.
    } ifFalse: {
      last_toc is last_toc_override.
    }.
    last_end is token @ 2.
    var lin is AST lexline.
    returned +=: '\n' * (AST lexline - lin).

    e_values put: token at: 'token'.
    e_values put: done at: 'done'.
    e_values put: last_toc at: 'last_toc'.
    e_values put: returned at: 'returned'.
    e_values put: last_end at: 'last_end'.
    e_values put: space at: 'space'.
    e_values put: messageAcceptors at: 'messageAcceptors'.
    ^e_values.
  } accumulator: (
    HashMap new
     put: ' ' at: 'space',
     put: (AST feedLexer: code) at: 'Tokens',
     put: False at: 'done',
     put: 'FIN' at: 'last_toc',
     put: [
      'BLOCKCLOSE', 'BOOLEANNO',
      'BOOLEANYES', 'CHAIN', 'NIL',
      'NUMBER', 'PARCLOSE', 'QUOTE', 'REF',
      'TUPCLOSE'
     ]
     at: 'messageAcceptors',
     put: 0 at: 'last_end',
     put: '' at: 'returned'
   ), at: 'returned'.
}.

Highlight on: 'highlight:html:' do: {:h:b ^me message: 'highlight:' arguments: [h,b]. }.
import export: Highlight as: 'Highlight'.
