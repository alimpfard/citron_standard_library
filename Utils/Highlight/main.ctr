import Library/Utils/Colors.

#:language XFrozen

var Highlight is Object new.
Highlight on: 'highlight:' do: {:code:html
  # preprocess the code to get rid of pesky comments
  code is code findPattern: ?>'((\\[^\n]|[^''\n])*)'|\#(.*?)\r?\n<? do: {:groups
    var cv is groups @ 0.
    cv startsWith: '#', ifTrue: {
      ^'\n'.
    }.
    ^cv.
  }.
  var space is ' '.
  var nocolor is Colors backendType = \HTML either: { ^Colors white. } or: ''.
  var returned is ''.
  var Tokens is AST feedLexer: code.
  var token is AST token.
  var done is False.
  var last_toc is 'FIN'.
  var messageAcceptors is ['BLOCKCLOSE', 'BOOLEANNO', 'BOOLEANYES', 'CHAIN', 'NIL', 'NUMBER', 'PARCLOSE', 'QUOTE', 'REF', 'TUPCLOSE'].
  var last_end is 0.
  {^done.} whileFalse: {
    var this_thing is ''.
    var rlen is Colors stripColors: returned, length.
    var color is ''.
    var last_toc_override is Nil.
    var after_color is ''.
    var noquote is False.
    (frozen _ is
       case: 'RET' do: {
        color is (Colors bold) + (Colors magenta).
        after_color is (Colors bold_off).
        this_thing is '^'.
        token put: 1 at: 3.
    }, case: 'ASSIGNMENT' do: {
        # rlen +=: 1.
        color is (Colors bold) + (Colors magenta).
        after_color is (Colors bold_off).
        token put: 2 at: 3.
        this_thing is 'is'.
    }, case: 'PASSIGNMENT' do: {
        # rlen +=: 1.
        color is (Colors bold) + (Colors magenta).
        after_color is Colors bold_off.
        token put: 2 at: 3.
        this_thing is '=>'.
    }, case: 'BLOCKCLOSE' do: {
      color is (Colors bold) + (Colors bright) + (Colors green).
      after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is '}'.
        token put: this_thing length at: 3.
    }, case: 'BLOCKOPEN' do: {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is '{'.
          token put: this_thing length at: 3.
    }, case: 'BLOCKOPEN_MAP' do: {
      color is (Colors bold) + (Colors bright) + (Colors green).
      after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is ?>{\<?.
          token put: this_thing length at: 3.
        last_toc_override is 'BLOCKOPEN'.
    }, case: 'BOOLEANNO' do: {
    color is Colors magenta.
        this_thing is 'False'.
        token put: this_thing length at: 3.
    }, case: 'BOOLEANYES' do: {
    color is Colors magenta.
        this_thing is 'True'.
        token put: this_thing length at: 3.
    }, case: 'CHAIN' do: {
        color is (Colors white).
        this_thing is ','.
        token put: this_thing length at: 3.
    }, case: 'COLON' do: {
        this_thing is ':'.
        (last_toc = 'BLOCKOPEN') | (last_toc = 'PARAMN') ifTrue: {
          color is (Colors bold) + (Colors bright) + (Colors magenta).
          after_color is (Colors bold_off) + (Colors bright_off).
          last_toc_override is 'PARAMC'.
        }, else: {
          color is Colors magenta.
        }.
        token put: this_thing length at: 3.
        # token put: (token @ 2 - 1) at: 2.
    }, case: 'DOT' do: {
        this_thing is '.'.
        token put: this_thing length at: 3.
    }, case: 'FIN' do: {
        done is True.
    }, case: 'NIL' do: {
    color is Colors magenta.
        this_thing is 'Nil'.
        token put: this_thing length at: 3.
    }, case: 'NUMBER' do: {
        color is Colors green.
        this_thing is (token @ 1) .
    }, case: 'PARCLOSE' do: {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is ')'.
        token put: this_thing length at: 3.
    }, case: 'PAROPEN' do: {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        this_thing is '('.
        token put: this_thing length at: 3.
    }, case: 'QUOTE' do: {
        this_thing is ''.
        noquote not either: {
          var string is AST getlexbuf.
          var in_escape is False.
          var begin is '\''.
          # var maybe_in_quot is False.
          var delet_this is 0.
          # var slen is string length.
          string characters each: {:i:c
            var justInEscape is False.
            # maybe_in_quot ifTrue: {
            #   maybe_in_quot is False.
            #   (c = '?') & (slen - 1 = i) ifTrue: {
            #     this_thing append: c.
            #     begin is '?>'.
            #     rlen -=: 1.
            #     True break.
            #   }.
            # }.
            (c = '\'') & (in_escape not) ifTrue: { this_thing append: c. True break. }.
            # (c = '<') & (slen - 2 = i) ifTrue: {
            #   this_thing append: c.
            #   maybe_in_quot is True.
            #   True continue.
            # }.
            (c = '\\') ifTrue: {
              in_escape either: {
                in_escape is False.
                justInEscape is True.
              } or: {
                justInEscape is True.
                in_escape is True.
              }.
            }.
              justInEscape not & in_escape ifTrue: {
                this_thing append: (Colors cyan + c + Colors yellow).
                delet_this +=: Colors cyan length * 2.
                in_escape is False.
                True continue.
              }.
              justInEscape ifTrue: {
                this_thing append: (Colors cyan + c + Colors yellow).
                delet_this +=: Colors cyan length * 2.
                justInEscape is False.
                True continue.
              }.
              this_thing append: c.
          }.
          AST lexSkip: this_thing bytes - delet_this.
          # Pen writeln: '-%d:%d, %s => l%d b%d' % [token @ 2, AST lexpos, this_thing, this_thing length, this_thing bytes].
          var lendiff is this_thing bytes - this_thing length.
          token put: AST lexpos - lendiff at: 2.
          token put: (Colors stripColors: this_thing, length + 1) at: 3.
          # Pen writeln: '+%d:%d, %s => l%d b%d' % [token @ 2, AST lexpos, this_thing, this_thing length, this_thing bytes].
          color is Colors yellow.
          this_thing is begin + this_thing.
        } or: {
          this_thing is '\''.
          color is Colors magenta.
        }.
    }, case: 'REF' do: {
        var str is token @ 1.
        var end is token @ 2.
        var len is token @ 3.
        token put: str length at: 3.
        var lendiff is len - (token @ 3).
        token put: end - lendiff at: 2.
        lendiff > 0 ifTrue: {
          # Pen writeln: 'Extra $$lendiff characters'.
          rlen +=: lendiff.
        }.
        (last_toc = 'PARAMC') ifTrue: {
          color is (Colors bold) + (Colors bright) + (Colors magenta).
          after_color is (Colors bold_off) + (Colors bright_off).
          this_thing is token @ 1.
          last_toc_override is 'PARAMN'.
        }, else: {
          var next is AST token.
          (next @ 0 !=: 'FIN') ifTrue: {AST lexPutBack.}.
          this_thing is (next @ 0 = 'COLON') either: {
            ^(token @ 1 = '\\') either: {
              color is (Colors bold) + (Colors bright) + (Colors green).
              after_color is (Colors bold_off) + (Colors bright_off).
              last_toc_override is 'BLOCKOPEN'.
              ^'\\'.
            }
            or: {
              color is (Colors bold) + (Colors bright) + (Colors magenta).
              after_color is (Colors bold_off) + (Colors bright_off).
              AST lexSkip: 1.
              token put: (token @ 2 + 1) at: 2.
              last_toc_override is 'MESSAGE'.
              ^(token @ 1 + ':').
            }.
          } or: {
            ^(messageAcceptors contains: last_toc) either: {
              ((token @ 1) length = 1) ifTrue: {last_toc_override is 'MESSAGE'.}.
              ((token @ 1) indexOf: ':', !=: -1) ifTrue: {
                # token put: (token @ 2) at: 2.
                token put: (token @ 1 + ':') at: 1.
              }.
              color is (Colors bold) + (Colors bright) + (token @ 0 = '\\' either: Colors green or: Colors magenta).
              after_color is (Colors bold_off) + (Colors bright_off).
              ^token @ 1.
            } or: {
              # Pen writeln: [token, last_toc, next].
              ^(token @ 1 @ 0) = ((token @ 1 @ 0) upper) either: {
                color is Colors magenta.
                ^(token @ 1) .
              } or: {
                ^['me', 'my', 'const', 'var', 'frozen'] contains: token @ 1, either: {
                  last_toc_override is 'QUAL'.
                  color is (Colors bold) + (Colors bright) + (Colors blue).
                  after_color is (Colors bright_off) + (Colors bold_off).
                  ^(token @ 1) .
                } or: {
                  ^(token @ 1).
                }.
              }.
            }.
          }.
        }.
        this_thing @ 0 = '`' either: {
          this_thing @ (this_thing length - 1) = '`' ifTrue: {
            color is (Colors bright) + (Colors italic) + (Colors yellow).
            after_color +=: Colors italic_off.
          }.
        } or: {}.
        token put: this_thing length at: 3.
    }, case: 'TUPOPEN' do: {
        this_thing is '['.
        token put: this_thing length at: 3.
    }, case: 'TUPCLOSE' do: {
        this_thing is ']'.
        token put: this_thing length at: 3.
    }, case: 'SYMBOL' do: {
        color is (Colors bold) + (Colors bright) + (Colors green).
        after_color is (Colors bold_off) + (Colors bright_off).
        var t is AST token.
        (t @ 1) !=: '',
          ifTrue: { token put: (t @ 2) at: 2. },
          else:   { token put: (t @ 2) at: 2. }.
        this_thing is '\\' + (t @ 1).
        token put: this_thing length at: 3.
    }, case: 'LITERAL_ESC' do: {
      this_thing is '$'.
      token last case: -1 do: {}, case: -2 do: {},
                 case: -3 do: { this_thing +=: '!'. }, case: -4 do: { this_thing +=: '\''. noquote is True.},
                 switch.
      color is Colors cyan.
      token put: this_thing length at: 3.
    }, default: {
        # Pen writeln: token.
        this_thing is token @ 1.
    }) switch: token @ 0.
    returned +=: nocolor + (space * ((token @ 2) - last_end - (token @ 3))).
    returned +=: color + this_thing + (Colors default) + (after_color).
    #Pen writeln: [token @ 0, last_toc, last_toc_override].
    (token @ 0 = 'CHAIN') & (last_toc = 'REF') ifTrue: { last_toc_override is 'NOT-CHAIN'. }.
    last_toc is last_toc_override or: token @ 0.
    last_end is token @ 2.
    var lin is AST lexline.
    token is AST token.
    returned +=: '\n' * (AST lexline - lin).
  }.
  #Pen line brk.
  ^returned.
}.

Highlight on: 'highlight:html:' do: {:h:b ^me message: 'highlight:' arguments: [h,b]. }.
import export: Highlight as: 'Highlight'.
