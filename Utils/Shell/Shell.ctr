# add some useful methods and functions for use in shell scripts :P

# split|join on newlines
String on: 'split' do: { ^split: '\n'. }.
Array on: 'join' do: { ^join: '\n'. }.

# read lines from file or stdin
var readLines is {:file
  file is file isNil either: {
    ^Object new on: 'read' do: { ^Program input. }.
  } or: file.
  ^file read split.
}.

var streamLines is {:file
  file is file isNil either: {
    ^File special: 'stdin'.
  } or: file.
  ^file generateLines.
}.

var stream is \:_ streamLines run.
var streamFile is \:f streamLines[File new: f].

# write array or str to stdout
var putLines is {:lines
  lines isA: Array, ifTrue: {
    lines each: {:_:line Pen writeln: line. }.
  } ifFalse: {
    lines isA: Generator, ifTrue: {
      lines each: {:_:v
        Pen writeln: v.
      }.
    } ifFalse: {
      Pen writeln: lines.
    }.
  }.
  ^ ''.
}.

var execPutLines is {:expr
  putLines[expr evaluate].
  ^ ''.
}.

# Execute shell cmd (sync), ignore output
var shExec is {:cmd
  Shell call: cmd.
  ^Nil.
}.

var sh is {:cmd
  ^Shell call: cmd.
}.

sh on: 'process:' do: {:cmd
  ^me applyTo: cmd.
}.

# Returns the arguments as an array
var collect is \:*args args.

# transform each line with a given function
var interact is {:fn:indicator
  indicator is indicator or: ''.
  { ^False. } whileFalse: {
    Pen write: indicator.
    var res is Program waitForInput rightTrim.
    (res = '') break.
    Pen writeln: (fn applyTo: res).
  }.
  ^ ''.
}.
