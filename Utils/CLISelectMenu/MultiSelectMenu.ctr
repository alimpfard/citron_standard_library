import AbstractMenu: \*.
import Library/Data/Set/HashSet: 'HashSet'.

#:language XFrozen

var MultiSelectMenu is AbstractMenu cnew: {
    on: 'new:pagesize:preSelected:' do: {:options:ps:presel
        options count < 2 ifTrue: {
            thisBlock error: 'multiselect menu must have at least two options'.
        }.
        me init.
        presel is presel or: [].
        original_sel => [(options indexOf: x),, (x: presel)].
        my selected is HashSet new addAll: my original_sel.
        options => options.
        pageSize => ps = -1 either: options count or: ps, min: options count - 2.
        my pageSize +=: 1.
        my pageSize < 2 ifTrue: {
            thisBlock error: 'pageSize must be >= 2'.
        }.
    }.
    on: 'new:pagesize:' do: {:o:p ^new: o pagesize: p preSelected: Nil. }.
    on: 'selected' do: {
      var selected is my selected.
      ^my options filter: \:i selected contains: i.
    }.
    on: 'options' do: { ^my options. }.
    on: 'cancel' do: { my selected is HashSet new addAll: my original_sel. }.
    on: 'pick:' do: {:cursor
      my selected contains: cursor, ifTrue: {
        my selected remove: cursor.
      } ifFalse: {
        my selected add: cursor.
      }.
      ^False.
    }.
    on: 'keypress:' do: {:c
      var options is my options.
      var selected is my selected.
      ^(frozen _ is String
        case: 'd' do: {
          ^ True.
        },
        case: 'a' do: {
          Generator elementsOf: options, each: {:i selected add: i. }.
          ^ False.
        },
        case: 'n' do: {
          selected toArray each_v: {:k selected remove: k. }.
          ^ False.
        },
        default: {
          # Nada
          ^ False.
        }) switch: c.
    }.
    on: 'request' do: {
      ^requestWithHeader: 'key bindings: d=done, a=all, n=none, q=cancel with default'.
    }.
    on: 'writelnInto:index:cursor:' do: {:self:term:idx:cursor
        cursor ifTrue: {
            term write: self config cursor-mark.
        } ifFalse: {
            term write: '  '.
        }.
        var opt is my options at: idx, replace: '\n' with: '\\n'.
        var ss is my selected contains: idx,
          either: self config check-full
          or: self config check-empty.
        term write: '%s %s' % [ss, opt].
    }.
}.
